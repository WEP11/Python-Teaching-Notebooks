import multiprocessing as mp

'''
I want 50 states of data, but I want simultaneous calls to make
my life easier
'''
jobs = []
queues = []
stateGroup = 25

# Loop through states
for state in STATES:
    # Limiting concurrent calls to a grouping number 'stateGroup'
    if i % stateGroup == 0 or i == numberOfStates:
        ws_q['state'].append(state)

        q = mp.Queue() # The 'Queue' lets us exchange data
        p = mp.Process(target=self.createDataCall,
                       args=(ws_q, 'StnMeta', q)) # Calling a function with arguments, the Queue is an argument
        # A collection of our queues and jobs for later
        queues.append(q)
        jobs.append(p)
        p.start()
        ws_q['state'] = []
    
    else: # For my use case, this groups states in my call
        ws_q['state'].append(state)
    i += 1

# Handle returned data
timeout = False
error = False
stnMeta = []
sids = []
stnStart = []
stnEnd = []
today = datetime.today() - relativedelta(day=1)

for i, p in enumerate(jobs):
    output = queues[i].get()
    # From here you handle the output as it was generated by your function...

    p.join() # This 'joins' the job back to the main process. Much important.
